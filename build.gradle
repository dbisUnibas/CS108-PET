plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.13'
}

/*
 * Group name
 */
group 'ch.unibas.dmi.dbis'
/*
 * The version is read
 */
version = readVersion()
/*
 * Adding a description
 */
description = """
short description

Project name: ${project.name}

brief(er) description
"""

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

repositories {
    mavenCentral()
}

def javafxversion = '17'

javafx {
    version = javafxversion
    modules = [ 'javafx.controls', 'javafx.web', 'javafx.base']
}

dependencies {
    // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.3'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.9.3'

    implementation group: 'org.controlsfx', name: 'controlsfx', version: '11.1.2'

    implementation group: 'com.j2html', name: 'j2html', version: '0.88'
    // https://mvnrepository.com/artifact/commons-lang/commons-lang
    implementation group: 'commons-lang', name: 'commons-lang', version: '2.6'
    implementation group: 'org.apache.commons', name: 'commons-math3', version: '3.6.1'

    implementation 'com.intellij:annotations:12.0'

    implementation 'org.kordamp.ikonli:ikonli-javafx:2.1.1'
    //implementation 'org.kordamp.ikonli:ikonli-dashicons-pack:2.1.1' // Maven central invalid --> not found on maven central (currently ?)
    implementation 'org.kordamp.ikonli:ikonli-openiconic-pack:2.1.1'

    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.17.0'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.17.0'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.17.0'

    implementation group: 'com.atlassian.commonmark', name: 'commonmark', version: '0.11.0'

    implementation group: 'net.objecthunter', name: 'exp4j', version: '0.4.8'

    //Export to XLS
    implementation group: 'org.apache.poi', name: 'poi-ooxml', version: '4.0.1'

    testImplementation group: 'junit', name: 'junit', version: '4.11'
}
compileJava.options.encoding = 'UTF-8'

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            srcDir 'src/main/resources'
        }
    }
    test {
        java {
            srcDir 'src/test/java'
        }
        resources {
            srcDir 'src/test/resources'
        }
    }
}

mainClassName = 'ch.unibas.dmi.dbis.cs108pet.main.Main'

jar {
    from {
        configurations.compileClasspath.collect{ it.isDirectory() ? it : zipTree(it)}
        configurations.runtimeClasspath.collect{ it.isDirectory() ? it : zipTree(it)}
    }
    manifest{
        attributes 'Main-Class': mainClassName
        attributes 'Multi-Release':true
    }
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
}

processResources {
    // Pass version to reqman by adding it to reqman.properties
    from(sourceSets.main.resources.srcDirs) {
        include 'cs108pet.properties'
        expand projectVersion: project.version
    }
    duplicatesStrategy(DuplicatesStrategy.INCLUDE)
    exclude 'log4j2-test.xml'
    // Do not copy the original file, since it would not have the version in it
    /*from(sourceSets.main.resources.srcDirs) {
        exclude 'reqman.properties'
    }*/
    outputs.upToDateWhen{false}
}

/**
 * From:
 * https://github.com/nostra13/Android-Universal-Image-Loader/issues/1086
 */
tasks.withType(Javadoc) {
    options.addStringOption('encoding', 'UTF-8')
    options.addStringOption('charSet', 'UTF-8')
    options.addStringOption('Xdoclint:none', '-quiet')
}


/**
 * Increments the specified versionPart in the version.properties file.
 * This increments the specified versionPart in the version.properties file by 1
 *
 * Allowed versionParts are: MajorVersion, MinorVersion, FixVersion, BuildNumber
 * The versionParts following the pattern *Version are under the Apache Versioning rules.
 *
 * The BuildNumber is incremented whenever the project is built.
 *
 * @param versionPart The versionPart to increment: Either MajorVersion, MinorVersion, FixVersion or BuildNumber
 */
static void incrementVersion(String versionPart) {
    String vKey = "artifact${versionPart}"
    Properties p = new Properties()
    File pF = new File('version.properties')
    p.load(pF.newDataInputStream())
    Integer version = (p.getProperty(vKey) as Integer)
    Integer nextVersion = version + 1
    p.setProperty(vKey, nextVersion.toString())
    p.store(pF.newWriter(), null)
    p.load(pF.newDataInputStream())
}

/**
 * Sets the version number of given version part.
 * @param versionPart
 * @param number
 */
static void setVersionPart(String versionPart, int number) {
    String vKey = "artifact${versionPart}"
    Properties p = new Properties()
    File pF = new File('version.properties')
    p.load(pF.newDataInputStream())
    p.setProperty(vKey, String.valueOf(number))
    p.store(pF.newWriter(), null)
    p.load(pF.newDataInputStream())
}

task incrementMajorVersion {
    group = 'versioning'
    description = 'Increments the majro version (so the M in M.m.F) number by 1. Only invoke when a major version update is appropriate.'
    doFirst {
        incrementVersion('MajorVersion')
        setVersionPart('MinorVersion', 0)
        printVersion()
    }
}

task incrementMinorVersion {
    group = 'versioning'
    description = 'Increments the minor version (so the m in M.m.F) number by 1. Only invoke when a minor version update is appropriate.'
    doFirst {
        incrementVersion('MinorVersion')
        setVersionPart('FixVersion', 0)
        printVersion()
    }
}

task incrementFixVersion {
    group = 'versioning'
    description = 'Increments the fix version (so the F in  M.m.F) number by 1. Only invoke when a bugfix is applied.'
    doFirst {
        incrementVersion('FixVersion')
        printVersion()
    }
}

task incrementBuildNumber() {
    group = 'versioning'
    description = 'Increments the build number by 1. Will be invoked right after build.'
    doLast {
        incrementVersion('BuildNumber')
    }
}

build.doLast {
    //incrementVersion('BuildNumber')
}

/**
 * Reads the version.properties file with its artifact version numbers and concatenats these numbers
 * to the version in format M.m.F-bB where M is the artifactMajorVersion, m is the artifactMinorVersion
 * F is the artifactFixVersion and B is the artifactBuildNumber.
 * The versioning follows the Appache Versioning rules.
 * @return The read version
 */
String readVersion() {
    Properties p = new Properties()
    File f = new File("${project.projectDir}/version.properties")
    p.load(f.newDataInputStream())
    //Integer build = (p.getProperty('artifactBuildNumber') as Integer)
    String suffix = p.getProperty('artifactVersionSuffix')
    suffix = suffix == null ? '' : suffix
    Integer fix = (p.getProperty('artifactFixVersion') as Integer)
    Integer minor = (p.getProperty('artifactMinorVersion') as Integer)
    Integer major = (p.getProperty('artifactMajorVersion') as Integer)
    if(suffix.isEmpty() ){
        return major.toString() + '.' + minor + '.' + fix/*+ '-b' + build.toString()*/
    }else{
        return major.toString() + '.' + minor + '.' + fix +"-"+suffix/*+ '-b' + build.toString()*/
    }

}

void printVersion() {
    setVersion(readVersion())
    println('v'+project.version)
}

/**
 * Reads the version.properties file with its artifact version numbers and then creats the version string
 * with respect to that file's content.
 */
task setupVersion {
    group = 'versioning'
    description = 'Reads the version from version.properties file and sets the projects version as that read version.'
    doFirst {
        String v = readVersion()
        setVersion(v)
        printVersion()
    }
}

jar.doLast {
    println 'Produced jar: '
}

task reqmanVersion {
    doLast {
        println('Current version of pet: ')
        printVersion()
    }
}
